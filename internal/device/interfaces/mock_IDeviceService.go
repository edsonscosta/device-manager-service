// Code generated by mockery v2.43.2. DO NOT EDIT.

package interfaces

import (
	model "device-manager-service/internal/device/model"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockIDeviceService is an autogenerated mock type for the IDeviceService type
type MockIDeviceService struct {
	mock.Mock
}

type MockIDeviceService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIDeviceService) EXPECT() *MockIDeviceService_Expecter {
	return &MockIDeviceService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: device
func (_m *MockIDeviceService) Create(device *model.Device) error {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Device) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIDeviceService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIDeviceService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - device *model.Device
func (_e *MockIDeviceService_Expecter) Create(device interface{}) *MockIDeviceService_Create_Call {
	return &MockIDeviceService_Create_Call{Call: _e.mock.On("Create", device)}
}

func (_c *MockIDeviceService_Create_Call) Run(run func(device *model.Device)) *MockIDeviceService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Device))
	})
	return _c
}

func (_c *MockIDeviceService_Create_Call) Return(_a0 error) *MockIDeviceService_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDeviceService_Create_Call) RunAndReturn(run func(*model.Device) error) *MockIDeviceService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: deviceID
func (_m *MockIDeviceService) Delete(deviceID uuid.UUID) error {
	ret := _m.Called(deviceID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(deviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIDeviceService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIDeviceService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - deviceID uuid.UUID
func (_e *MockIDeviceService_Expecter) Delete(deviceID interface{}) *MockIDeviceService_Delete_Call {
	return &MockIDeviceService_Delete_Call{Call: _e.mock.On("Delete", deviceID)}
}

func (_c *MockIDeviceService_Delete_Call) Run(run func(deviceID uuid.UUID)) *MockIDeviceService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockIDeviceService_Delete_Call) Return(_a0 error) *MockIDeviceService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDeviceService_Delete_Call) RunAndReturn(run func(uuid.UUID) error) *MockIDeviceService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAll provides a mock function with given fields: limit, offset, brand
func (_m *MockIDeviceService) GetByAll(limit int, offset int, brand string) ([]*model.Device, error) {
	ret := _m.Called(limit, offset, brand)

	if len(ret) == 0 {
		panic("no return value specified for GetByAll")
	}

	var r0 []*model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*model.Device, error)); ok {
		return rf(limit, offset, brand)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*model.Device); ok {
		r0 = rf(limit, offset, brand)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(limit, offset, brand)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDeviceService_GetByAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAll'
type MockIDeviceService_GetByAll_Call struct {
	*mock.Call
}

// GetByAll is a helper method to define mock.On call
//   - limit int
//   - offset int
//   - brand string
func (_e *MockIDeviceService_Expecter) GetByAll(limit interface{}, offset interface{}, brand interface{}) *MockIDeviceService_GetByAll_Call {
	return &MockIDeviceService_GetByAll_Call{Call: _e.mock.On("GetByAll", limit, offset, brand)}
}

func (_c *MockIDeviceService_GetByAll_Call) Run(run func(limit int, offset int, brand string)) *MockIDeviceService_GetByAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockIDeviceService_GetByAll_Call) Return(_a0 []*model.Device, _a1 error) *MockIDeviceService_GetByAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDeviceService_GetByAll_Call) RunAndReturn(run func(int, int, string) ([]*model.Device, error)) *MockIDeviceService_GetByAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: deviceID
func (_m *MockIDeviceService) GetByID(deviceID uuid.UUID) (*model.Device, error) {
	ret := _m.Called(deviceID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*model.Device, error)); ok {
		return rf(deviceID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *model.Device); ok {
		r0 = rf(deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDeviceService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIDeviceService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - deviceID uuid.UUID
func (_e *MockIDeviceService_Expecter) GetByID(deviceID interface{}) *MockIDeviceService_GetByID_Call {
	return &MockIDeviceService_GetByID_Call{Call: _e.mock.On("GetByID", deviceID)}
}

func (_c *MockIDeviceService_GetByID_Call) Run(run func(deviceID uuid.UUID)) *MockIDeviceService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockIDeviceService_GetByID_Call) Return(_a0 *model.Device, _a1 error) *MockIDeviceService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDeviceService_GetByID_Call) RunAndReturn(run func(uuid.UUID) (*model.Device, error)) *MockIDeviceService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: device
func (_m *MockIDeviceService) Update(device *model.Device) error {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Device) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIDeviceService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIDeviceService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - device *model.Device
func (_e *MockIDeviceService_Expecter) Update(device interface{}) *MockIDeviceService_Update_Call {
	return &MockIDeviceService_Update_Call{Call: _e.mock.On("Update", device)}
}

func (_c *MockIDeviceService_Update_Call) Run(run func(device *model.Device)) *MockIDeviceService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Device))
	})
	return _c
}

func (_c *MockIDeviceService_Update_Call) Return(_a0 error) *MockIDeviceService_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDeviceService_Update_Call) RunAndReturn(run func(*model.Device) error) *MockIDeviceService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: deviceID, status
func (_m *MockIDeviceService) UpdateStatus(deviceID uuid.UUID, status bool) error {
	ret := _m.Called(deviceID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, bool) error); ok {
		r0 = rf(deviceID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIDeviceService_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockIDeviceService_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - deviceID uuid.UUID
//   - status bool
func (_e *MockIDeviceService_Expecter) UpdateStatus(deviceID interface{}, status interface{}) *MockIDeviceService_UpdateStatus_Call {
	return &MockIDeviceService_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", deviceID, status)}
}

func (_c *MockIDeviceService_UpdateStatus_Call) Run(run func(deviceID uuid.UUID, status bool)) *MockIDeviceService_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(bool))
	})
	return _c
}

func (_c *MockIDeviceService_UpdateStatus_Call) Return(_a0 error) *MockIDeviceService_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDeviceService_UpdateStatus_Call) RunAndReturn(run func(uuid.UUID, bool) error) *MockIDeviceService_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIDeviceService creates a new instance of MockIDeviceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIDeviceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIDeviceService {
	mock := &MockIDeviceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
